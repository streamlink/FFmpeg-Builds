name: Build FFmpeg

on:
  push:
    paths-ignore:
      - '**.md'
      - 'LICENSE'

env:
  DOCKER_BUILDKIT: 1

jobs:
  build_base:
    name: Build base image
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Free Disk-Space
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: .github/buildkit.toml
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Image Name
        id: imagename
        run: |
          IMG="${GITHUB_REPOSITORY,,}/base"
          echo "name=ghcr.io/${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "rawname=${IMG/ /-}" >> $GITHUB_OUTPUT
      - name: Stop Commands
        run: T="$(echo -n ${{ github.token }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
      - name: Build target base image
        uses: docker/build-push-action@v5
        with:
          context: images/base
          pull: true
          push: true
          provenance: false
          tags: ${{ steps.imagename.outputs.name }}:latest
          cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache
      - name: Get download cache key
        id: dl_cache
        run: |
          echo "dltagname=$(./util/get_dl_cache_tag.sh)" >> $GITHUB_OUTPUT
      - name: Cache
        uses: actions/cache@v4
        with:
          path: .cache/downloads
          key: download-cache-${{ steps.dl_cache.outputs.dltagname }}
          restore-keys: |
            download-cache-
      - name: Update Cache
        run: |
          set -e
          ./download.sh
          ./util/clean_cache.sh
  build_target_bases:
    name: Build target base image
    needs: build_base
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        target:
          - win32
          - win64
    steps:
      - name: Free Disk-Space
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: .github/buildkit.toml
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Image Name
        id: imagename
        run: |
          IMG="${GITHUB_REPOSITORY,,}/base-${{ matrix.target }}"
          echo "name=ghcr.io/${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "rawname=${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "gh_repo=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
      - name: Stop Commands
        run: T="$(echo -n ${{ github.token }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
      - name: Build target base image
        uses: docker/build-push-action@v5
        with:
          context: images/base-${{ matrix.target }}
          pull: true
          push: true
          provenance: false
          tags: ${{ steps.imagename.outputs.name }}:latest
          cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache
          build-args: |
            GH_REPO=ghcr.io/${{ steps.imagename.outputs.gh_repo }}
  build_targets:
    name: Build target-variant image
    needs: build_target_bases
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        target:
          - win32
          - win64
        variant:
          - gpl 7.0
    steps:
      - name: Free Disk-Space
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: .github/buildkit.toml
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Image Name
        id: imagename
        run: |
          IMG="${GITHUB_REPOSITORY,,}/${{ matrix.target }}-${{ matrix.variant }}"
          echo "name=ghcr.io/${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "rawname=${IMG/ /-}" >> $GITHUB_OUTPUT
      - name: Get download cache key
        id: dl_cache
        run: |
          echo "dltagname=$(./util/get_dl_cache_tag.sh)" >> $GITHUB_OUTPUT
      - name: Stop Commands
        run: T="$(echo -n ${{ github.token }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
      - name: Generate Dockerfile
        run: ./generate.sh ${{ matrix.target }} ${{ matrix.variant }}
      - name: Cache
        uses: actions/cache/restore@v4
        with:
          path: .cache/downloads
          key: download-cache-${{ steps.dl_cache.outputs.dltagname }}
          fail-on-cache-miss: true
      - name: Build target base image
        uses: docker/build-push-action@v5
        with:
          context: .
          pull: true
          push: true
          provenance: false
          tags: ${{ steps.imagename.outputs.name }}:latest
          cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache
  build_ffmpeg:
    name: Build ffmpeg
    needs: build_targets
    runs-on: ubuntu-latest
    permissions:
      packages: read
    strategy:
      fail-fast: false
      matrix:
        target:
          - win32
          - win64
        variant:
          - gpl 7.0
    steps:
      - name: Free Disk-Space
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Build ffmpeg
        run: |
          T="$(echo -n ${{ github.token }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
          ./build.sh ${{ matrix.target }} ${{ matrix.variant }}
      - name: Replace spaces in string
        id: strs
        run: |
          SLUG="${{ matrix.target }}-${{ matrix.variant }}"
          echo "artifact_slug=${SLUG// /-}" >> $GITHUB_OUTPUT
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ steps.strs.outputs.artifact_slug }}
          overwrite: true
          path: artifacts/*
  publish_release:
    name: Publish release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: build_ffmpeg
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ffmpeg-*
          merge-multiple: true
          path: artifacts
      - name: Deploy
        run: ./deploy.sh ./artifacts/*
        env:
          RELEASES_API_KEY: ${{ github.token }}
