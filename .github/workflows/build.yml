name: Build FFmpeg

on:
  push:
    paths-ignore:
      - '**.md'
      - 'LICENSE'

env:
  DOCKER_BUILDKIT: 1

jobs:
  build_base:
    name: Build base image
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Image Name
        id: imagename
        run: echo "::set-output name=name::ghcr.io/${GITHUB_REPOSITORY,,}/base:latest"
      - name: Build base image
        run: docker build --pull --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from ${{ steps.imagename.outputs.name }} --tag ${{ steps.imagename.outputs.name }} images/base
      - name: Push base image
        run: docker push ${{ steps.imagename.outputs.name }}
  build_target_bases:
    name: Build target base image
    needs: build_base
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        target:
          - win32
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Image Name
        id: imagename
        run: echo "::set-output name=name::ghcr.io/${GITHUB_REPOSITORY,,}/base-${{ matrix.target }}:latest"
      - name: Build target base image
        run: docker build --pull --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg GH_REPO=${GITHUB_REPOSITORY,,} --cache-from ${{ steps.imagename.outputs.name }} --tag ${{ steps.imagename.outputs.name }} images/base-${{ matrix.target }}
      - name: Push target base image
        run: docker push ${{ steps.imagename.outputs.name }}
  build_targets:
    name: Build target-variant image
    needs: build_target_bases
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        target:
          - win32
        variant:
          - gpl 4.4
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install buildx
        uses: docker/setup-buildx-action@v1
      - name: Generate Dockerfile
        run: ./generate.sh ${{ matrix.target }} ${{ matrix.variant }}
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Image Name
        id: imagename
        run: |
          IMG="ghcr.io/${GITHUB_REPOSITORY,,}/${{ matrix.target }}-${{ matrix.variant }}"
          echo "::set-output name=name::${IMG/ /-}:latest"
          echo "::set-output name=cache_name::${IMG/ /-}:cache"
      - name: Build variant image
        run: |
          docker buildx build \
            --pull \
            --tag ${{ steps.imagename.outputs.name }} \
            --cache-to=type=registry,mode=max,ref=${{ steps.imagename.outputs.cache_name }} \
            --cache-from=type=registry,ref=${{ steps.imagename.outputs.cache_name }} \
            --output=type=image,push=true,name=${{ steps.imagename.outputs.name }} \
            .
  build_ffmpeg:
    name: Build ffmpeg
    needs: build_targets
    runs-on: ubuntu-latest
    permissions:
      packages: read
    strategy:
      fail-fast: false
      matrix:
        target:
          - win32
        variant:
          - gpl 4.4
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Build ffmpeg
        run: ./build.sh ${{ matrix.target }} ${{ matrix.variant }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ffmpeg
          path: artifacts/*
  publish_release:
    name: Publish release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: build_ffmpeg
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ffmpeg
          path: artifacts
      - name: Deploy
        run: ./deploy.sh ./artifacts/ffmpeg-*.zip
        env:
          RELEASES_API_KEY: ${{ github.token }}
